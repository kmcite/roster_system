// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/models/roster.dart';
import 'domain/models/roster_entry.dart';
import 'domain/models/staff.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 254320003348920138),
      name: 'Roster',
      lastPropertyId: const obx_int.IdUid(34, 7592486097849978212),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1474553333585108595),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5030158122609980906),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'entries', srcEntity: 'RosterEntry', srcField: 'roster')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5074097526984463544),
      name: 'RosterEntry',
      lastPropertyId: const obx_int.IdUid(5, 2653202142544884192),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3739874199116277914),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2165203596883297133),
            name: 'staffId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8523341709572579841),
            relationTarget: 'Staff'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7380932826733573313),
            name: 'rosterId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 1675832860225924630),
            relationTarget: 'Roster'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8245386715218180771),
            name: 'dayIndex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2653202142544884192),
            name: 'shiftIndex',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 477797549725563320),
      name: 'Staff',
      lastPropertyId: const obx_int.IdUid(17, 5091330537074305164),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 450083737162052945),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7651766003712432041),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(18, 3526175939167861465),
            name: 'rosters',
            targetId: const obx_int.IdUid(1, 254320003348920138))
      ],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'entries', srcEntity: 'RosterEntry', srcField: 'staff')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 477797549725563320),
      lastIndexId: const obx_int.IdUid(17, 8791597363274245906),
      lastRelationId: const obx_int.IdUid(18, 3526175939167861465),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [
        6377144161917583803,
        5399088420610080197,
        8883652676965435682,
        7133107331051425646,
        6382373383567447229,
        6056751459382166505,
        4835845587923509419,
        1769401183417762448,
        1496119514722281616,
        4387518598645446411,
        522219012005752469,
        8737694210764111938,
        3709614214452151097,
        692451692405353647,
        8791597363274245906
      ],
      retiredPropertyUids: const [
        1160153893473035345,
        9210611871526494400,
        4591396366073502741,
        2694863564479759285,
        3714085798965801085,
        2364355086624196914,
        665033948873193039,
        8614707549146304197,
        7094161968630872385,
        7018099617321305352,
        6067898400382082278,
        9008175577464036499,
        2833173158167139131,
        7580944964235778690,
        5091330537074305164,
        1817063069894344904,
        1729071571877071074,
        5967823439672079474,
        6012837596124047003,
        6390938505408352560,
        1532413243535829206,
        4616288106730428503,
        6555522054769103692,
        1067170149201656316,
        8225251529843310408,
        1957823563130245941,
        6109066955981033732,
        1614178520861390516,
        159695514039643336,
        3538413771885844529,
        2483799360306649571,
        149692437209958703,
        2207794098793575251,
        7832894496286133748,
        4893711810627593606,
        51514169683023475,
        5423752002595242048,
        7584729178741427102,
        4891445691226889105,
        7395183591319369202,
        8931935110660184423,
        5677733899144182805,
        1204680727416696599,
        112316194266080714,
        4915424743199002847,
        9152673361458521465,
        7592486097849978212
      ],
      retiredRelationUids: const [
        880498598958103814,
        2617341360877047886,
        7656355040250938075,
        933254629438565757,
        7522454684689972252,
        6926156582826082454,
        7707159797334884941,
        6765436704075326765,
        2485846951338315549,
        7743689975773827676,
        2604325297995971018,
        3691246591868193414,
        5961447699113946835,
        5579667494563796600,
        4317250828588756758,
        1826876514701405641,
        7490347967063939535
      ],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Roster: obx_int.EntityDefinition<Roster>(
        model: _entities[0],
        toOneRelations: (Roster object) => [],
        toManyRelations: (Roster object) => {
              obx_int.RelInfo<RosterEntry>.toOneBacklink(3, object.id,
                  (RosterEntry srcObject) => srcObject.roster): object.entries
            },
        getId: (Roster object) => object.id,
        setId: (Roster object, int id) {
          object.id = id;
        },
        objectToFB: (Roster object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(35);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Roster()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');
          obx_int.InternalToManyAccess.setRelInfo<Roster>(
              object.entries,
              store,
              obx_int.RelInfo<RosterEntry>.toOneBacklink(
                  3, object.id, (RosterEntry srcObject) => srcObject.roster));
          return object;
        }),
    RosterEntry: obx_int.EntityDefinition<RosterEntry>(
        model: _entities[1],
        toOneRelations: (RosterEntry object) => [object.staff, object.roster],
        toManyRelations: (RosterEntry object) => {},
        getId: (RosterEntry object) => object.id,
        setId: (RosterEntry object, int id) {
          object.id = id;
        },
        objectToFB: (RosterEntry object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.staff.targetId);
          fbb.addInt64(2, object.roster.targetId);
          fbb.addInt64(3, object.dayIndex);
          fbb.addInt64(4, object.shiftIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = RosterEntry()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dayIndex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..shiftIndex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.staff.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.staff.attach(store);
          object.roster.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.roster.attach(store);
          return object;
        }),
    Staff: obx_int.EntityDefinition<Staff>(
        model: _entities[2],
        toOneRelations: (Staff object) => [],
        toManyRelations: (Staff object) => {
              obx_int.RelInfo<Staff>.toMany(18, object.id): object.rosters,
              obx_int.RelInfo<RosterEntry>.toOneBacklink(
                      2, object.id, (RosterEntry srcObject) => srcObject.staff):
                  object.entries
            },
        getId: (Staff object) => object.id,
        setId: (Staff object, int id) {
          object.id = id;
        },
        objectToFB: (Staff object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(18);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Staff()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');
          obx_int.InternalToManyAccess.setRelInfo<Staff>(object.rosters, store,
              obx_int.RelInfo<Staff>.toMany(18, object.id));
          obx_int.InternalToManyAccess.setRelInfo<Staff>(
              object.entries,
              store,
              obx_int.RelInfo<RosterEntry>.toOneBacklink(
                  2, object.id, (RosterEntry srcObject) => srcObject.staff));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Roster] entity fields to define ObjectBox queries.
class Roster_ {
  /// See [Roster.id].
  static final id =
      obx.QueryIntegerProperty<Roster>(_entities[0].properties[0]);

  /// See [Roster.name].
  static final name =
      obx.QueryStringProperty<Roster>(_entities[0].properties[1]);

  /// see [Roster.entries]
  static final entries =
      obx.QueryBacklinkToMany<RosterEntry, Roster>(RosterEntry_.roster);
}

/// [RosterEntry] entity fields to define ObjectBox queries.
class RosterEntry_ {
  /// See [RosterEntry.id].
  static final id =
      obx.QueryIntegerProperty<RosterEntry>(_entities[1].properties[0]);

  /// See [RosterEntry.staff].
  static final staff =
      obx.QueryRelationToOne<RosterEntry, Staff>(_entities[1].properties[1]);

  /// See [RosterEntry.roster].
  static final roster =
      obx.QueryRelationToOne<RosterEntry, Roster>(_entities[1].properties[2]);

  /// See [RosterEntry.dayIndex].
  static final dayIndex =
      obx.QueryIntegerProperty<RosterEntry>(_entities[1].properties[3]);

  /// See [RosterEntry.shiftIndex].
  static final shiftIndex =
      obx.QueryIntegerProperty<RosterEntry>(_entities[1].properties[4]);
}

/// [Staff] entity fields to define ObjectBox queries.
class Staff_ {
  /// See [Staff.id].
  static final id = obx.QueryIntegerProperty<Staff>(_entities[2].properties[0]);

  /// See [Staff.name].
  static final name =
      obx.QueryStringProperty<Staff>(_entities[2].properties[1]);

  /// see [Staff.rosters]
  static final rosters =
      obx.QueryRelationToMany<Staff, Roster>(_entities[2].relations[0]);

  /// see [Staff.entries]
  static final entries =
      obx.QueryBacklinkToMany<RosterEntry, Staff>(RosterEntry_.staff);
}
